// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// DataDir statically implements the virtual filesystem provided to vfsgen.
var DataDir = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 12, 28, 2, 13, 4, 338982251, time.UTC),
		},
		"/config.yaml": &vfsgen۰CompressedFileInfo{
			name:             "config.yaml",
			modTime:          time.Date(2019, 12, 28, 2, 13, 4, 338982251, time.UTC),
			uncompressedSize: 7887,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x99\x41\x8f\x5d\x45\xce\x86\xf7\xfd\x2b\x5a\xec\x13\x1d\xbb\xca\x2e\x9b\x1d\x1f\xf0\x2d\x66\x26\x30\x02\xa4\x59\x5f\x42\x12\x1a\x3a\x7d\xa3\xee\x8e\x88\xe6\xd7\x8f\xca\x8f\x2f\x42\x88\x3b\xb3\x39\xee\x7b\x8e\xeb\xad\x2a\xdb\xf5\x96\xed\x7e\x3e\xff\xfa\xe6\xe1\xe9\xf3\x9b\xdb\xdb\xf7\xa7\xbb\x87\xcf\x6f\xbf\xff\xf6\xd5\xd7\xdf\x7d\xf1\xcd\x57\xdf\xbe\xfa\xe1\xdb\xbf\x7f\xfd\xcd\xcd\xcd\x87\xd7\xfb\xe3\x17\x1f\x9f\x9e\x1f\x4f\xf7\x77\xa7\xfd\xe3\xf6\xf6\xf4\xf1\xe5\xfd\xf9\xdd\xdd\xc3\xcb\x0f\xa7\xe7\x9f\xcf\x6f\xdf\x7c\xba\xbb\x7f\xf3\xf2\xf5\xf9\xfd\xcd\xed\xed\x0f\x6f\x3e\x9d\x9e\xd0\xfa\xf8\x74\x55\xeb\xb3\x7f\x9d\x9e\x7e\xbe\x7b\x78\xf7\x7c\x7e\xb8\xfd\xea\xe5\x97\x2f\x3f\x63\xc4\x6f\x3f\xbd\xbe\x3a\xe4\xcb\xd3\xfd\xdd\xdb\xf3\xe3\xc3\x65\x0d\x4f\xbf\x5c\xd7\xfd\xe2\xfd\xd3\xf3\x9b\xc7\x9f\x4e\xef\x51\x7d\x73\x7d\xb9\xff\xff\x78\x7a\xf8\xf5\xed\xc7\xc7\x67\x34\xdf\x3e\x9e\xae\xaa\xfe\xe3\xfc\xf0\xd3\xf9\x01\xbd\xfb\xf3\xc3\x55\xbd\x57\x77\xf7\xa7\x56\x7b\x7f\x77\x7f\x55\xed\xff\x1e\x4f\xff\xbe\xbb\x47\xef\xc7\xc7\xab\x6a\xff\x3c\x3d\xde\xb5\x3d\x3f\x9c\xae\xab\xbd\x3a\x3f\xbd\x3e\xff\xd6\xb3\x9e\xaf\xaa\x7d\x7f\xf7\xf0\xee\xf4\xe1\xfc\xf8\xa6\x6d\xf8\xee\xaa\xe6\xdf\x4e\x1f\x2e\xbb\xf8\xe5\xc3\x15\xad\x9b\x4f\x3f\x9e\x3f\xfd\x75\x78\xec\x2f\xff\x33\x3a\xae\x28\xfd\x97\xe0\xb8\x32\xe2\xaf\x62\xe3\x8a\xea\x5f\x38\xfc\x8a\xe6\x9f\xfd\x7d\x45\xed\x4f\x7e\xbc\xa2\xf5\xdd\xc7\xa7\xa7\xcb\xea\x1e\xaf\x98\xe7\xe6\xc3\xf9\xf1\xf9\xe9\xf3\x9b\x17\xb7\x72\xf3\xe2\x76\xdc\xbc\xb8\x9d\x37\x2f\x6e\xfd\xe6\xc5\xed\xba\x79\x71\x9b\xfb\xfd\x7e\x29\xfb\x97\xec\x9f\x7a\xec\xc7\x56\x56\xdd\x8f\xfd\x55\xf7\x18\xdd\x83\xc6\xfe\x3a\xf6\x87\xb1\x3f\x8c\x3d\x6c\xee\x9f\xb3\xa0\x37\x80\xed\xbf\xd6\xd6\x5b\xfb\x67\xec\xbf\x62\xe3\xc5\xd6\x8b\xfd\x35\x36\x5e\xd8\x7e\xc4\x7e\x6c\xbd\xdc\x7a\x59\x0b\x3a\x8e\x7a\x7a\x3d\xeb\x8d\xd4\x1b\x91\x7a\xd6\x7a\x6b\xad\xa2\x1b\x43\x6a\x6e\x99\xb3\x9e\x35\xca\x4b\xd3\xd9\x59\x69\x16\xb2\x16\x82\x4a\x6d\x8c\xed\x59\x6d\xcd\xac\x9e\x5e\xcf\xd2\xf4\x7a\x5f\x8b\x1f\x47\x99\xae\xd6\x33\x0a\x61\xcc\x7a\xef\xf5\xa6\x56\x3f\xeb\xeb\x3c\xca\x1e\x52\x7f\x0b\xb6\xb1\x7a\xd6\xdf\xd8\xa8\xd6\x39\x6d\x6f\x7c\xd6\x2c\xd3\x4b\xa7\x6c\x34\x73\x6b\x5a\x59\xc0\x6a\x9d\x56\xfb\x35\x99\xf5\xdc\x9a\x56\xee\xb0\x29\xf5\xac\xaf\x93\x37\xf5\x75\x6e\x64\xab\x7d\x59\xed\xcb\xca\x0e\x16\x85\x9c\xfb\x6f\xaf\x15\x7a\xad\xd0\x6b\x85\x3e\xa4\x9e\xf5\x7e\xf2\xdc\x38\x5e\x7b\x74\x2f\x4d\xaf\x37\xe5\x41\x2f\x34\x4f\x29\x5f\x97\xb3\x8f\x8d\xb3\xca\x3e\xab\x56\xbb\x2a\x94\x56\xd9\x79\x55\xf4\xac\x0a\x90\x55\xfb\x5d\x6b\x23\xac\x42\x5b\x85\x16\x85\x13\x65\xed\x38\x2a\x30\x6a\x77\xb1\xea\x49\x20\x75\xc0\x44\x45\x4c\x85\x4c\xe9\xe7\xa1\xf5\xdc\x9a\x59\x6b\xc8\xb2\x5e\x96\x55\xb3\xf0\xb3\x43\xac\xde\x97\x1d\x32\xad\x9e\x1d\x75\x84\x5d\xe1\xc9\x51\x80\x72\x94\x47\xe5\x20\x0c\x0f\xe2\xf0\x20\x10\x0f\x6d\x81\x66\x9d\x14\x39\xca\x39\x72\x10\x99\x87\x12\xc4\x0a\x8a\x06\x02\xb0\x01\xd8\x00\x65\x80\x32\x40\x19\xa0\x0c\x50\x06\x28\x03\x94\x01\xca\x00\x65\x82\x32\x41\x99\xa0\x70\x22\x0e\x8e\xc4\x31\x41\xe1\x68\x1c\x13\x94\x09\xca\x04\xc5\x40\x31\x50\x0c\x14\x03\xc5\x40\x31\x50\x0c\x14\x03\xc5\x40\x31\x50\xbc\x0f\x2e\x28\x0e\x0a\xa7\xf0\x70\x50\x1c\x14\x07\xc5\x41\x71\x50\x1c\x94\x05\xca\x02\x65\x81\xb2\x40\x59\xa0\x2c\x50\x16\x28\x0b\x94\x05\x0a\xe7\xfd\x08\x50\x02\x94\x00\x25\x40\x09\x50\x02\x94\x00\x25\x40\x09\x50\x02\x94\x04\x25\x41\x49\x50\x12\x94\x04\x25\x41\xc9\xa6\x2b\x50\x12\x94\x6c\xf6\x82\xbe\x08\x29\x39\x26\xc2\x10\x8e\x58\x88\x80\xe8\x9a\xef\x20\x3c\x61\x5c\x13\x9f\x30\x1c\xc6\x6e\x1e\x14\x42\x51\x08\x45\x21\x14\x85\x50\x14\x62\x50\x08\x37\x19\x4d\xa2\x68\x12\x52\x42\x48\x09\x41\x24\xc4\x8b\x10\x28\x32\xfb\x1b\x13\x11\x21\x42\x84\x08\xa1\xd1\x44\x2b\xde\xbf\x18\x8e\x8b\x05\xa7\x0a\x8e\x13\x1c\x27\xf8\x41\xa2\x7f\xa1\x89\x03\x04\x23\x0b\x16\x84\xb7\x45\x39\x94\x8a\x09\xb4\xe8\x4b\x14\x13\xa8\x94\xa6\x72\x72\x94\x93\xa3\x1c\x19\xe5\x04\x28\x5b\x51\xb6\x02\xc3\x8b\x12\x60\x4a\x80\x29\x41\xa4\x2c\x42\xf1\xe6\xc0\x71\x5c\x00\x32\x20\x81\x81\x73\xb8\x09\x64\x60\xf2\xc1\xd1\x1e\xcc\x3e\x30\x0f\x57\x80\x4c\x56\x36\xf9\x36\xfb\xb6\xe2\x38\x4d\xce\xca\x24\x96\xe0\x7d\x31\xe6\xb3\x62\x33\x31\x7c\x0b\xeb\x8b\x01\x66\x1c\x43\x23\xca\x0d\x7b\x1a\x28\x0e\x8a\xe3\x4d\xe7\x88\x42\xe4\x02\x6f\x8b\x13\xe5\x30\xb7\x2c\xd6\xb9\x30\xe4\x22\xa4\x60\x6f\x59\xcc\xbe\x08\xa9\xc5\xaa\x17\xab\x5e\x9c\x2a\x38\x5c\x20\x6e\x09\xe2\x3a\x08\xda\x80\xa5\x02\x96\x0a\x28\x21\x88\x97\x20\x5e\x82\x98\x80\xcd\x25\x09\xef\x84\xf9\x12\xc7\x25\xae\x4a\x5c\x95\xc4\x52\x72\x8a\x93\x40\x81\xc4\x15\x12\x57\x48\x5c\x21\x71\x3d\xca\x90\x7a\xd4\xc1\xd3\xa3\x16\xa8\x47\x1d\x3c\x85\xe0\xf5\xa8\x83\xa7\xf0\xbc\xc2\xf3\x7a\x08\xe3\x48\x89\xa0\x7b\x85\xee\x15\xf6\x56\xf8\x5a\xe1\x6b\x85\xaf\x15\x86\x56\xa8\x59\xa1\x66\x85\x9a\x15\x6a\x56\x38\x59\xe1\x64\x85\x93\x15\x4e\x56\x38\x59\xa1\x4a\x85\x1c\xf5\xe8\x04\x86\xfd\x09\x3b\x82\x43\x14\x0e\x51\x38\x44\xa5\x93\x1c\xb2\x39\x98\x41\x21\x01\x15\x16\x48\xae\xa4\xe2\x80\x39\x2a\x8b\x5f\x8b\x71\xc9\xaf\xe4\x5b\x9d\x07\x55\x66\xef\xd4\x49\x8d\x2c\x11\x14\xad\x90\x52\xce\x8a\x0e\xf2\x46\x52\x24\x1d\xc1\xcb\x20\xa3\x0c\xbe\x65\x8b\x89\xa8\x69\x27\xc3\x67\x92\x9c\x31\x9f\x75\xaa\xa6\x64\x69\x75\xf5\xa8\xa3\xe9\xb8\xd8\xf1\xad\x63\x10\x3f\x5a\xa5\x96\xe4\xb8\x63\x31\x60\x31\x60\xe1\x62\x42\x5f\x09\x7d\x5d\xcc\x40\x22\xa2\x41\x30\x04\xf6\x0c\xe7\x57\x45\xab\x26\xdf\x12\x94\x24\x42\xb2\xae\x33\x4d\x3c\x46\x60\x0e\x22\x72\x1c\x9d\x44\x96\xe3\x06\x31\x38\x88\xc1\x41\x0c\x0e\xd2\x8a\x41\xd4\x8d\x43\x78\x49\xc6\x4d\x96\x30\xb8\x99\x07\x77\xe3\xe0\xe2\x1b\x52\xdc\x33\xa4\xa6\x1d\xe4\xb8\x43\x15\xe1\x24\xec\xde\xbf\x50\xa9\xad\x0c\x2d\x3f\x0c\x48\x6e\x74\x96\xdb\x69\x2e\xb4\x36\x70\xe3\x18\xc5\x3d\x63\x94\x79\xc6\x20\xf5\x1f\xc6\x80\xda\xf4\x18\x60\x8e\x05\x18\x0b\x1c\x0b\x94\xe0\x5b\x85\xd4\x98\xe5\xaa\x31\xeb\xf2\x1e\xb3\xa2\x60\x18\xbb\x35\x45\xd4\xb1\x18\xc6\x0c\x90\xdc\xf0\xa2\xed\xe1\x80\x39\x60\x0b\x7b\xae\xba\xc7\xc6\x22\x23\x5f\xc5\x0c\x03\x37\x0e\x78\x69\xe0\xcd\x11\xc2\x37\xaa\x99\x60\xbe\xc0\x82\xc1\x7c\x78\x7a\x04\x7b\x88\xc5\x37\x16\x11\xcc\x9e\xf8\x0f\xb2\x1a\x59\xd1\x33\x88\x82\x91\x93\x6f\x0c\xcf\xba\xdc\x06\x99\xe6\x20\x26\x26\x31\x31\x89\x89\x09\x4b\x4d\x42\x63\xc2\x52\x93\x08\x99\x47\xd7\x15\x85\x39\x39\xda\x93\xb2\x67\x72\xa6\xa7\x54\x3a\x39\xb5\x7c\x34\x95\x6a\x4c\xeb\x14\xcf\x51\x51\x30\xc7\xa5\xf2\x68\x31\x11\x86\x70\x44\x0d\xb0\x4a\x04\xa7\x95\x53\xa7\x17\x5f\xcf\x28\x5e\x9a\x51\x47\x74\x42\xd4\x93\xad\x18\x5b\x31\xb6\x62\x6c\xc5\xd8\x8a\xb1\x15\x83\x54\x8d\x48\x36\x18\xd3\xc8\x38\x8d\x8c\xd3\xc8\x31\x8d\x04\xd2\x48\x20\x8d\x14\xce\x48\xcc\x4c\xba\x26\x62\x22\x72\x29\x13\xe5\x65\x05\x83\x41\x4f\xa6\xd4\x4a\x9c\x00\x83\xac\x4c\x95\xd2\xa9\x6c\x66\x9c\x00\xa3\xbe\x33\x65\x2b\xa3\x88\xc5\xe6\x41\x19\x05\xca\x1c\x5d\x66\x29\x75\x56\x0d\xe8\xfa\xcc\x04\x31\xbb\xd6\xe2\x17\x35\x97\xb1\x15\xab\x88\x34\xca\x2b\x73\xf6\xee\xfd\xb2\x22\xcb\xbc\x5c\x65\x50\x90\x2d\xac\x44\xec\x1a\xb1\x6b\xc1\x6e\x83\xf9\x20\x24\x0b\x8a\xc1\x60\x7f\xc1\xfe\x82\x45\x44\x9d\x15\xe3\xbe\xb5\x58\x94\x7e\x60\x52\x30\x19\x15\x93\x51\x32\x59\xe2\xaa\xac\x70\xb3\x3c\x18\xc0\x7c\xd4\x53\x96\xcc\x97\xcc\x97\xcc\x97\xcc\x97\xc6\x4b\xa6\x4d\xf6\x9e\xb8\x31\x59\x44\x52\x85\x66\x97\xa1\x75\x5b\x58\x06\x03\x70\x00\x77\xb8\x13\x52\x4e\x48\x39\x21\xe5\x84\x94\x13\x52\xce\xe9\x70\x4e\x87\xc3\x9f\x4e\x9c\x39\xa5\x97\x53\x93\x38\x61\xe3\x84\x8d\x73\x53\x3a\x19\xb5\x93\x27\x3b\x07\xc8\xa5\x52\x2a\x1f\x54\xbf\x70\x96\x1b\xb3\xe3\x69\xa7\xda\x76\xab\xeb\xda\xad\x2e\x68\xc7\xc5\xce\x91\x71\xc8\xca\xbb\x86\xbe\x94\xcf\x5d\x3f\x7b\x97\xd4\x49\x35\x8d\xa8\xab\xce\x9d\xbd\xaf\x85\x28\xf3\xf8\x42\x65\xa1\x42\x2e\xe5\x51\x97\xa9\xe3\x46\xcf\x02\x5b\x47\xd7\xe0\x47\x17\xe4\x8a\x98\x88\xaa\xb4\x0f\x41\xb3\xcc\xb3\xa8\xb2\x16\xe6\x59\xe4\x13\x0b\xf3\x2c\xce\xd1\x22\xe9\x5e\x13\xb0\x59\xa9\xc3\x82\x43\xd6\xac\x84\x60\xd1\xa2\x58\xf4\x10\x96\x17\x9b\x2e\x2f\x66\x5f\xab\xf2\x9e\xd5\x75\xfe\xaa\x60\x5f\xc4\xf5\x22\xa4\x16\x8c\xb9\x52\xf9\x55\x24\xbe\xb2\xae\xeb\x45\x30\xc4\xd1\x4d\x81\xee\x0a\xd4\x5a\x82\x1d\x05\x49\x5b\xe0\xf7\x20\x69\x0b\x6e\xd1\x20\x5b\x0b\xb2\xb5\xe0\xfa\x0c\x72\xb0\x80\x4d\x03\x7e\x09\x4a\xc4\xa0\x44\x0c\x4a\xc4\xa0\x44\x0c\x4a\xc4\xa0\x44\x8c\xa3\xdb\x14\xf4\x20\x28\x11\x83\x12\x31\x28\x0a\x83\x34\x2d\x30\x6b\x48\x37\xbf\x98\x81\xca\x26\x04\x4d\xa9\xbc\x27\xb0\x75\xc0\x52\x41\x3b\x2a\x14\x4c\x4d\xda\x66\x8c\xe3\x9e\x0e\x6e\xdf\x18\xdd\x48\xe3\x25\x3e\x0a\x9c\x13\xd0\x53\x78\x8b\x62\xf6\xf0\x62\xda\xf0\x3a\xa9\xe1\x4c\x44\x4e\x14\xdd\x79\xb9\x34\x5a\xd8\x1f\x74\x1f\x59\xeb\xcc\xa3\x9b\x2d\xdd\x6d\xe9\x76\x0b\xfd\x16\x1c\x90\x38\x20\x71\x40\x92\xfd\x26\x3c\x9f\x64\x2c\x89\xc9\x13\x93\x27\xa6\x4b\xaa\xeb\xc4\x74\x89\xe9\x92\x03\x9b\xf0\x7c\xca\xa5\xb1\xc3\x37\x66\xc0\x74\xa9\x15\x0c\xa9\xca\x2f\x30\x67\x91\x55\xce\x22\xd5\x9c\xe5\xc6\xc4\x2e\xc9\x99\x4e\xca\xab\xb4\xc1\xb7\x85\xa0\x2f\x44\x25\x95\x46\x7f\xc8\x41\xe1\x30\x67\xac\x16\x0b\x51\xdf\xba\x23\xd5\x2d\xa9\x14\xfa\x4d\x45\x2c\x99\x93\x5e\x53\x5d\x13\x49\x76\x98\xd9\x03\x7e\xef\x3d\x75\xf3\xe9\xd2\x7d\xba\xb4\x9f\xa8\x01\x0f\x8e\xf2\x96\xad\x2f\x97\x66\x55\xeb\x75\xdb\xe9\xd2\x77\xba\x34\x3c\xa4\xdb\x20\x2a\xdd\x8f\xea\xce\x90\x5d\x1a\x30\x72\x91\xdd\x89\xd1\x4b\xef\xa6\xdf\x77\xcb\xca\xbb\x67\xc5\x31\x96\x3f\x74\x28\xe8\x07\x90\xfa\x4a\xd7\x5f\xbb\x34\xa7\xf0\x56\x9a\x01\x3a\xe8\x29\x8c\x49\xdd\x3a\x56\x97\xcd\x5d\x42\x8e\xae\x21\x3b\x33\x92\xa9\x74\x24\xe6\xa4\x88\x9d\x93\xc6\x56\xa7\x1b\xd2\x89\x86\x74\xa6\x21\x9d\x6a\x88\x39\x2d\x28\x5b\xe8\xf7\x5d\x22\x7d\x99\x88\xb7\xbd\xfc\x60\xdf\x7e\x50\xf3\x7a\xb7\x8b\xbc\x9b\x2c\x4e\x97\x70\x4b\xea\x5e\xbc\x2d\x8b\x7b\x4b\xa2\xdb\x6e\x21\x5d\xf4\xf6\xfb\x0e\x5b\x49\x72\x6b\xc9\x81\xdd\x73\xd0\x60\xcb\xc5\x3c\xd9\xc5\x72\x46\x57\x85\xbf\xd7\xad\x97\xe2\x74\x5c\x8a\xcd\x8b\x44\x8f\x4c\x55\xc5\x16\xb5\x57\xd6\x9d\xa0\x83\x98\xd6\xce\xed\x74\x76\x09\x63\x8b\xc2\xd4\x16\x85\x9f\x93\x1b\x69\xdf\x17\xba\xe8\x54\x6c\x39\x5a\x5a\xcb\x2a\xdc\xd6\x12\x2a\x22\xbd\x94\x2f\x5d\xcd\x90\xad\x8c\x23\x49\x99\xbb\x29\x39\x64\x90\x88\xeb\xea\x4a\x63\x75\xa9\xb1\xa8\x0b\x36\x60\x4b\x6d\x39\x5a\xce\x96\xd6\xd2\x5b\x36\xde\x6a\xbc\xd5\x78\xd1\x78\xd1\x78\xd1\x78\xd1\x78\xd1\x78\xd1\x25\x8b\xcd\xae\x44\x6a\xfc\xc4\x7e\x5b\x6a\x4b\xca\x10\xeb\x9a\x01\xce\x9d\x07\x64\x3d\x8f\xec\xcc\xdb\x90\x4a\x42\x30\xa7\xac\xce\x9e\x49\xbb\x7f\x4f\xb1\x69\xe1\xcc\xce\x5a\x67\xdf\x35\x33\x69\x9c\x6d\x39\x5a\xce\x96\xd6\xd2\x5b\xae\x96\xd1\x92\xdc\x9b\x92\x7d\x4b\x69\xd9\x38\xde\xe3\xbd\xc7\xad\xfe\xcd\xfa\x72\x5e\x92\xf6\xcc\xce\xda\x3b\x6d\xbf\xe4\xed\x97\xc4\xfd\x92\xb9\x93\x08\x1e\xa3\xf5\x48\x87\x76\xd6\xde\x19\xfa\xf0\x4e\xd1\x49\xc0\x21\x68\x13\xca\x39\x53\x5f\xc8\xce\x4e\x95\x12\xc2\xba\x8a\xb6\x2e\x68\x76\x5a\xcd\x7f\x2b\x8e\xce\x9a\x69\x2f\xdb\x1f\xb2\xe8\x83\x1c\xb9\xe2\x6a\x4b\xb2\x64\x2d\x82\xb6\xb5\xf8\x7f\x49\xdb\x77\x27\x8b\x48\xfc\xe0\x62\x83\x4c\x0f\x62\x76\xa5\x49\xec\x63\xf0\xff\x8e\xe9\xa4\x80\xd3\x19\xdf\xfc\xe2\xd6\x39\xa1\xed\x7d\xff\x27\x00\x00\xff\xff\xc7\xf1\x1a\x74\xcf\x1e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/config.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
