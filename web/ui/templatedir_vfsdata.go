// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package ui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// TemplateDir statically implements the virtual filesystem provided to vfsgen.
var TemplateDir = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 26, 17, 44, 42, 587129659, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 12, 26, 17, 44, 42, 587129659, time.UTC),
			uncompressedSize: 881,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x51\xc1\x6e\xd3\x40\x10\xbd\xe7\x2b\xa6\x3e\xe3\x5d\x5a\x84\x40\xd1\x3a\x17\xa8\xc4\x89\x46\x14\x0e\x1c\xc7\xbb\xe3\x7a\xc3\x7a\x6d\xed\x8c\x9d\x54\x56\xfe\x1d\x25\x8e\x9b\x90\x0a\xf0\xc1\xf6\xf3\x7b\xf3\xfc\xf6\x8d\xb9\xf9\xfc\xf0\xe9\xfb\xcf\xf5\x3d\xd4\xd2\x84\xd5\xc2\x4c\x0f\x00\x53\x13\xba\xc3\x0b\x80\x69\x48\x10\x6c\x8d\x89\x49\x8a\xac\x97\x2a\xff\x98\x5d\x52\x11\x1b\x2a\xb2\xc1\xd3\xb6\x6b\x93\x64\x60\xdb\x28\x14\xa5\xc8\xb6\xde\x49\x5d\x38\x1a\xbc\xa5\xfc\x08\xde\x80\x8f\x5e\x3c\x86\x9c\x2d\x06\x2a\x6e\x67\x23\xf1\x12\x68\xb5\x46\xa9\xe1\xa1\x82\xfb\x9d\x0f\x04\x8f\x82\xd2\x33\xac\xf1\x89\x8c\x9e\x04\x93\x38\xf8\xf8\x0b\x12\x85\x22\x63\x79\x0e\xc4\x35\x91\x64\x50\x27\xaa\x8a\xac\x16\xe9\x78\xa9\xb5\x75\x71\xc3\xca\x86\xb6\x77\x55\xc0\x44\xca\xb6\x8d\xc6\x0d\xee\x74\xf0\x25\xeb\xb2\x0f\x0d\xea\xb7\xea\x83\xba\xd3\x96\x4f\x58\x35\x3e\x2a\xcb\x3c\x87\x62\x9b\x7c\x27\xe0\xa8\xa2\x04\x9c\xec\xd9\xbd\x67\x52\x55\x1b\x05\xb7\xc4\x6d\x33\x99\x27\x0a\x84\x4c\xac\x87\xf7\xea\x9d\xba\xd5\x1b\xd6\x18\x82\xda\x70\xb6\x32\x7a\xb2\x3a\x36\xab\xe7\x6a\x4d\xd9\xba\xe7\xf9\x57\x64\xc5\xb7\x11\x6c\x40\xe6\x22\x3b\xc1\x53\x10\x00\xe3\xfc\x30\x73\x87\x7a\xd1\x47\x4a\x2f\xec\x35\x1f\xfa\x26\x5e\x90\x87\x7a\xb1\x0c\x34\x0b\x8e\xe0\x0f\xfe\xa0\x38\x87\x39\x5f\xe3\x98\x30\x3e\x11\xa8\x6f\xc4\x7d\x10\xde\xef\xaf\x04\x87\xc1\x74\x3d\x35\x7d\x76\xab\x71\x54\x5f\x5a\x96\xfd\xde\x68\x71\xff\x10\xfd\xe8\xfe\x2b\xf9\xda\x37\x25\xa5\x87\xea\x11\x9b\x2e\x10\xff\x4d\x6f\xf4\xeb\x34\xe3\x48\xd1\x5d\x05\x37\xfa\xd5\x71\x8d\x3e\xd6\x72\x51\xa9\x76\x7e\x78\xe9\xff\x0c\x8c\x3e\x2d\x67\x5a\xe6\xe4\xb3\x30\x37\x79\x0e\x83\x6f\x96\x20\x5c\xdc\x2d\x79\xba\x6f\x8b\xbb\x25\xed\x3a\x8c\x4e\xb0\x5c\xe4\xf9\x6a\xf1\x3b\x00\x00\xff\xff\xb5\x78\xaa\xa7\x71\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
