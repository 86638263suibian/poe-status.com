// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package ui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// TemplateDir statically implements the virtual filesystem provided to vfsgen.
var TemplateDir = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 25, 19, 19, 22, 215011742, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 12, 25, 19, 19, 22, 218345050, time.UTC),
			uncompressedSize: 914,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x51\xc1\x6e\xdb\x3a\x10\xbc\xfb\x2b\x36\x3a\x3f\x91\x2f\x2e\x8a\x16\x06\x65\xa0\x48\x03\xb4\xa7\x18\x4d\x7b\xe8\x71\x4d\xae\x22\xba\x14\x65\x70\x57\xb2\x03\xc1\xff\x5e\xc8\xb2\x62\xd7\x41\x1b\x1d\x24\x8d\x66\x76\x34\x9c\x35\x37\x9f\x1f\xee\xbe\xff\x5c\xdd\x43\x25\x75\x58\xce\xcc\xf8\x00\x30\x15\xa1\x1b\x5e\x00\x4c\x4d\x82\x60\x2b\x4c\x4c\x52\x64\xad\x94\xf9\xc7\xec\x92\x8a\x58\x53\x91\x75\x9e\x76\xdb\x26\x49\x06\xb6\x89\x42\x51\x8a\x6c\xe7\x9d\x54\x85\xa3\xce\x5b\xca\x8f\xe0\x3f\xf0\xd1\x8b\xc7\x90\xb3\xc5\x40\xc5\xed\x64\x24\x5e\x02\x2d\x57\x28\x15\x3c\x94\x70\xbf\xf7\x81\xe0\x51\x50\x5a\x86\x15\x3e\x91\xd1\xa3\x60\x14\x07\x1f\x7f\x41\xa2\x50\x64\x2c\xcf\x81\xb8\x22\x92\x0c\xaa\x44\x65\x91\x55\x22\x5b\x5e\x68\x6d\x5d\xdc\xb0\xb2\xa1\x69\x5d\x19\x30\x91\xb2\x4d\xad\x71\x83\x7b\x1d\xfc\x9a\xf5\xba\x0d\x35\xea\xff\xd5\x07\x35\xd7\x96\x4f\x58\xd5\x3e\x2a\xcb\x3c\x85\x62\x9b\xfc\x56\xc0\x51\x49\x09\x38\xd9\xb3\x7b\xcb\xa4\xca\x26\x0a\xee\x88\x9b\x7a\x34\x4f\x14\x08\x99\x58\x77\xef\xd5\x3b\x75\xab\x37\xac\x31\x04\xb5\xe1\x6c\x69\xf4\x68\x75\x6c\x56\x4f\xd5\x9a\x75\xe3\x9e\xa7\x5f\x91\x15\xdf\x44\xb0\x01\x99\x8b\xec\x04\x4f\x41\x00\x8c\xf3\xdd\xc4\x0d\xf5\xa2\x8f\x94\x5e\xd8\x6b\x3e\xb4\x75\xbc\x20\x87\x7a\x71\x1d\x68\x12\x1c\xc1\x1f\xfc\xa0\x38\x87\x39\x5f\x7d\x9f\x30\x3e\x11\xa8\x6f\xc4\x6d\x10\x3e\x1c\xae\x04\xc3\x60\xba\x9e\x1a\x3f\xbb\x65\xdf\xab\x47\x8b\xf1\xeb\xea\x70\x30\x5a\xdc\x3f\x64\x5f\x1a\x96\x37\x45\x3f\xb6\x6f\x4a\xee\x12\xa1\x90\xfb\xf4\x57\x33\xa3\x5f\xc7\xed\x7b\x8a\xee\xea\x64\x46\xbf\xea\xc3\xe8\x63\x6f\x17\x9d\x6b\xe7\xbb\x97\x05\x9d\x81\xd1\xa7\xed\x8d\xdb\x1e\x7d\x66\xe6\x26\xcf\xa1\xf3\xf5\x02\x84\x8b\xf9\x82\xc7\xfb\xae\x98\x2f\x68\xbf\xc5\xe8\x04\xd7\xb3\x3c\x5f\xce\x7e\x07\x00\x00\xff\xff\xad\x70\x2f\x91\x92\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
